import {PrismaClient} from "@prisma/client";

import serviceShared from "@/shared/service.shared";
import announcementSchema from "@/app/api/v1/announcement/announcement.schema";

import asyncHandler from "@/util/asyncHandler";
import announcementSelectionCriteria from "@/app/api/v1/announcement/announcement.selection.criteria";

/**
 * An instance of PrismaClient used to interact with the database.
 * PrismaClient provides a set of methods to perform operations such as queries,
 * mutations, and transactions on the connected database.
 *
 * This object serves as the main entry point for communicating with the database
 * through Prisma's Data Proxy or directly. It encapsulates the database connection
 * and provides a typed API for interacting with the schema-defined models.
 *
 * Note: Ensure to initialize and close the PrismaClient instance appropriately.
 * Mismanagement of database connections can lead to resource leaks.
 */
const prisma = new PrismaClient();

/**
 * Represents the data model for an Announcement in the Prisma ORM.
 * This model corresponds to a database table typically used to store
 * information related to announcements within a system. Each instance
 * of this model reflects a single row in the corresponding table, with
 * properties mapped to the table's columns.
 *
 * The `Announcement` model is automatically generated by Prisma's schema
 * and may include various fields, constraints, and relations as defined
 * in the Prisma schema file.
 *
 * Usage of this model enables querying, creating, updating, and deleting
 * announcement records in the database through Prisma's API.
 */
const model = prisma.Announcement;

/**
 * Asynchronous function that handles fetching an announcement by category and ID.
 *
 * This function utilizes the provided request and context to execute a service call,
 * retrieving an entry of type 'Announcement' by utilizing specific selection criteria.
 * It leverages the `announcementSelectionCriteria` function to generate the criteria
 * required for the selection process while adhering to a schema for category and ID
 * validation.
 *
 * @param {Object} request - The request object containing necessary data for fetching an announcement.
 * @param {Object} context - The context object providing additional runtime information.
 * @returns {Promise<Object>} A promise that resolves to the fetched announcement entry.
 */
export const handleGetAnnouncementByCategoryAndId = async (request, context) => {
    const selectionCriteria = announcementSelectionCriteria();

    return serviceShared.fetchEntryByCategoryAndId(request, context, model, selectionCriteria,  'Announcement', () => announcementSchema.categoryAndIdSchema());
};

/**
 * Handles GET requests for fetching announcements by category and ID.
 *
 * This variable represents an asynchronous request handler that uses the
 * `asyncHandler` to wrap the `handleGetAnnouncementByCategoryAndId` function.
 * It ensures that any asynchronous errors during the request handling are
 * caught and passed to the error-handling middleware.
 *
 * The `handleGetAnnouncementByCategoryAndId` function is invoked to process
 * the request and retrieve the announcement based on the provided category
 * and identifier parameters.
 */
export const GET = asyncHandler(handleGetAnnouncementByCategoryAndId);
